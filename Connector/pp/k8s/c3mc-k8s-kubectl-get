#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

$|++;

use MYDB;
use MYDan::Util::OptConf;
use YAML::XS;
use File::Temp;
use Digest::MD5;

=head1 SYNOPSIS

 $0 -id ticketid

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->get( qw( id=i ) )->dump();
$option->assert( 'id' );

my $ticketid = $o{id};

my $db = MYDB->new( "/data/Software/mydan/CI/conf/conn" );

my $r = eval{ $db->query( "select ticket from openc3_ci_ticket where id='$ticketid'" ); };

my ( $version, $ticket, $proxy ) = split /_:separator:_/, $r->[0][0], 3;

die "version format error in ticket" unless $version =~ /^v\d+\.\d+\.\d+$/;
my $kubectl   = $version eq 'v0.0.0' ? "kubectl" : "kubectl_$version";
my $proxyenv  = $proxy && $proxy =~ /^[a-zA-Z0-9:\.@]+$/ ? "HTTPS_PROXY='socks5://$proxy'" : "";

my $md5        = Digest::MD5->new->add( $ticket )->hexdigest;
my $kubeconfig = "/data/Software/mydan/tmp/kubeconfig_${ticketid}_$md5";

sub out
{
    my ( $kubeconfig, $proxyenv, $kubectl ) = @_;
    if( @ARGV )
    {
        die if system "KUBECONFIG=$kubeconfig $proxyenv $kubectl ". join ' ', @ARGV;
    }
    else
    {
        print "KUBECONFIG=$kubeconfig $proxyenv $kubectl\n";
    }
    exit;
};

out( $kubeconfig, $proxyenv, $kubectl ) if -f $kubeconfig;

my $fh = File::Temp->new( UNLINK => 0, SUFFIX => '.config', TEMPLATE => "/data/Software/mydan/tmp/kubeconfig_${ticketid}_XXXXXXXX" );
print $fh $ticket;
close $fh;

die "rename fail: $!" if system "mv '$fh' '$kubeconfig'";
out( $kubeconfig, $proxyenv, $kubectl );
