#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;
use YAML::XS;
use OPENC3::Tree;

use utf8;
binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';


=head1 SYNOPSIS

 $0 time|curr type subtype
 $0 time|curr type subtype grepuuid

=cut

my ( $curr, $type, $subtype, $grepuuid ) = @ARGV;
die "argv err" unless $subtype;

my $vmtype = $subtype =~ /^(.+)\-volume$/ ? $1 : undef;
my %vmtree;
if( $vmtype )
{
    my @x = `c3mc-device-data-get $curr compute $vmtype uuid treename`;
    chomp @x;
    for( @x )
    {
        my ( $uuid, $tree ) = split /\t/, $_;
        $vmtree{ $uuid } = $tree;
    }
}

$curr = "timemachine/$curr" if $curr ne 'curr';

my $path = "/data/open-c3-data/device/$curr/$type/$subtype";
my $file = "$path/data.tsv";

die "nofile $file" unless -f $file;
my @data = `cat $file`;
exit unless @data;
chomp @data;

my $util = eval{ YAML::XS::LoadFile "$path/util.yml" };
die "load util fail: $@" if $@;
my $defaulttree = $util->{defaulttree};
my $copytreecol = $util->{copytreecol};
my $extcol      = $util->{extcol     };

$copytreecol ||= '_tree_';
$copytreecol = [ $copytreecol ] if ref $copytreecol ne 'ARRAY';

$extcol = [] unless $extcol && ref $extcol eq 'ARRAY';

my ( %treeow, %extcol );
my $_tree_ = grep{ $_ eq '_tree_' }@$copytreecol;
if( $_tree_ )
{
    if( $curr eq 'curr' )
    {
        my @treeow = `c3mc-base-db-get -t openc3_device_bindtree uuid tree -f 'type="$type" and subtype="$subtype"'`;
        chomp @treeow;

        for( grep{ /^[a-zA-Z0-9]/ }@treeow )
        {
            my ( $uuid, $tree ) = split /;/, $_, 2;
            $treeow{ $uuid } = $tree;
        }
    }
    else
    {
        my @treeow = `cat /data/open-c3-data/device/$curr/openc3_device_bindtree.txt`;
        chomp @treeow;
        for( grep{ /^[a-zA-Z0-9]/ }@treeow )
        {
            my ( $typet, $subtypet, $uuid, $tree ) = split /;/, $_, 4;
            next unless $typet && $subtypet && $typet eq $type && $subtypet eq $subtype;
            $treeow{ $uuid } = $tree;
        }
    }
}

if( $curr eq 'curr' )
{
    my @extcol = `c3mc-base-db-get -t openc3_device_extcol uuid name data -f 'type="$type" and subtype="$subtype"'`;
    chomp @extcol;

    for( grep{ /^[a-zA-Z0-9]/ }@extcol )
    {
        utf8::decode( $_ );
        my ( $uuid, $name, $data ) = split /;/, $_, 3;
        $extcol{ $uuid }{ $name } = $data;
    }
}
else
{
    my @extcol = `cat /data/open-c3-data/device/$curr/openc3_device_extcol.txt`;
    chomp @extcol;
    for( grep{ /^[a-zA-Z0-9]/ }@extcol )
    {
        utf8::decode( $_ );
        my ( $typet, $subtypet, $uuid, $name, $data ) = split /;/, $_, 5;
        next unless $typet && $subtypet && $typet eq $type && $subtypet eq $subtype;
        $extcol{ $uuid }{ $name } = $data;
    }
}

my $colname = eval{ YAML::XS::LoadFile "$path/colmap.yml" };
die "load colmap fail: $@" if $@;

die "treename undef in colmap.yml" unless my $treenamecol = $colname->{ treename };
die "uuid     unfef in colmap.yml" unless my $uuidcol     = $colname->{ uuid     };

my $title = shift @data;
utf8::decode($title);
my @title = split /\t/, $title;

my @ptitle = @title;
push @ptitle, $treenamecol unless grep{ $_ eq $treenamecol }@title;
push @ptitle, '_tree_' if $_tree_;
push @ptitle, '_vmtree_' if $vmtype;
push @ptitle, map{ $_->{name} }@$extcol;

printf "\%s\n", join "\t", @ptitle;
for my $data ( @data )
{
    utf8::decode($data);
    my @d = split /\t/, $data;

    my %d = map{ $title[ $_ ] => $d[ $_ ] } 0 .. @title - 1;

    map{
        $d{ $_->{name} } = $extcol{ $d{ $uuidcol } } && $extcol{ $d{ $uuidcol } }{ $_->{name} }
            ? $extcol{ $d{ $uuidcol } }{ $_->{name} } : '';
    }@$extcol;


    if( $vmtype )
    {
        $d{ _vmtree_ } = ( $d{'_vmuuid_'} && $vmtree{ $d{'_vmuuid_'} } ) ? $vmtree{ $d{'_vmuuid_'} } : '';
    }

    $d{ _tree_       } = $treeow { $d{ $uuidcol } } if $_tree_;
    $d{ $treenamecol } = join ',', grep{ $_ }map{ $d{ $_ } }@$copytreecol;

    if( $defaulttree && ! $d{ $treenamecol } )
    {
        $d{ $treenamecol } = $defaulttree;
    }
    next if $grepuuid && $d{ $uuidcol} ne $grepuuid;

    map{ $d{ $_ } = OPENC3::Tree::compress( $d{ $_ } ) if $d{ $_ }; }( '_tree_', $treenamecol );

    printf "%s\n", join "\t", map{ $d{$_} // '' }@ptitle;
}
