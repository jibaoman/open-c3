#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

use Encode;
use YAML::XS;
use MYDan::Util::OptConf;
use OPENC3::Tree;

=head1 SYNOPSIS

 $0
 $0 grepuuid
 $0 --col uuid,treename
 $0 --timemachine time

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->set( timemachine => 'curr' )->get( qw( col=s timemachine=s ) )->dump();

my $grepuuid = shift @ARGV;

my $path = sprintf "/data/open-c3-data/device/%s", $o{timemachine} ne 'curr' ? "timemachine/$o{timemachine}" : 'curr';

my $allcolmap = YAML::XS::LoadFile "$path/colmap.yml";
map{ die "undef" unless $allcolmap->{$_} }qw( treename uuid );

my @res;

for ( glob "$path/*/*/data.tsv" )
{
    my ( undef, $subtype, $type ) = reverse split /\//, $_;
    next unless my @data = `c3mc-device-cat $o{timemachine} $type $subtype`;
    chomp @data;
    my $title = shift @data;
    next unless @data;
    my @title = split /\t/, $title;

    my $colmap = YAML::XS::LoadFile "$path/$type/$subtype/colmap.yml";
    map{ die "undef" unless $colmap->{$_} }qw( treename uuid );

    my $outline = YAML::XS::LoadFile "$path/$type/$subtype/outline.yml";
    map{ die "error" unless $outline->{$_} && ref $outline->{$_} eq 'ARRAY' }qw( baseinfo contact system uuid );

    for my $data ( @data )
    {
        my @dat = split /\t/, $data;
        my %data = map{ $title[$_] => $dat[$_] }0 .. $#title;
        my %res = ( type => $type, subtype => $subtype );
        $res{ uuid     } = $data{ Encode::encode('utf8', $colmap->{ uuid     } ) };
        $res{ treename } = $data{ Encode::encode('utf8', $colmap->{ treename } ) };

        map{ $res{ $_ } = $data{  $_ }; }qw( account accountuuid 部门 业务负责人 运维负责人 audit );

        my $treenamcol = Encode::encode('utf8', $colmap->{ treename } );
        map{ $data{ $_ } = OPENC3::Tree::merge( $data{ $_ } ) if $data{ $_ }; }( $treenamcol );

        for my $ol ( qw( baseinfo contact system ) )
        {
            my @cocol = @{ $outline->{ $ol } };

            my $x = join ' | ', map{ $_ // ''}map{ $data{ Encode::encode('utf8', $_ ) }; }@cocol;
            $res{ $ol } = $x;

        }
        my $raw = $data; $raw =~ s/\t/,/g;
        $res{ raw } = $raw;
        push @res, \%res;
    }
}

my    @tree = `c3mc-base-treemap cache`;
chomp @tree;
my    %tree;
for( @tree )
{
    my ( $id, $name ) = split /;/, $_, 2;
    $tree{ $name } = $id;
}

sub luxation
{
    my $treename = shift @_;
    return 0 unless $treename;
    my %res;
    for my $tree ( split /,/, $treename )
    {
        $res{ $tree } = 1 unless $tree{ $tree };
    }
    return %res ? 1 : 0;
}

my @col = qw( account accountuuid type subtype uuid baseinfo contact system treename luxation audit 部门 业务负责人 运维负责人 raw );
@col = split /,/, $o{col} if $o{col};

exit unless @res;
map{ $_->{ luxation} = luxation( $_->{treename }); }@res;

printf "%s\n", join "\t", map{ Encode::encode('utf8', $_ ) }map{ $allcolmap->{ $_ } || $_ }map{ Encode::decode('utf8', $_ ) }@col;
for my $x ( @res )
{
    next if $grepuuid && $x->{ uuid } ne $grepuuid;
    printf "%s\n", join "\t", map{ $x->{ $_ } // '' } @col;
}
