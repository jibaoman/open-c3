#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;

$|++;

use YAML::XS;
use Carp;
use POSIX;
use Encode;
use Time::Local;

=head1 SYNOPSIS

 $0

=cut

local $/ = undef;
my @data = YAML::XS::Load( my $x = <STDIN> );
local $/ = "\n";

$ENV{PATH} = "$ENV{PATH}:/data/Software/mydan/AGENT/pp:/data/Software/mydan/Connector/pp:/data/Software/mydan/JOB/pp";

my $envstr = `c3mc-job-environment`;
my $environment = eval{YAML::XS::Load $envstr};
confess "load fail: $@" if $@;

my %template =
(
    monitorTemplateEmailTitle   => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
    monitorTemplateEmailContent => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
    monitorTemplateSmsContent   => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
    monitorTemplateCallContent  => 'monitor: host:${labels.instance} alter: ${labels.alertname} status:${status}',
);

sub gettime
{
    my $t = shift;
    return $t unless $t =~ /^(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)\.\d+Z$/;
    my $x = timelocal($6,$5,$4,$3,$2-1,$1);
    return POSIX::strftime( "%Y-%m-%d %H:%M:%S", localtime( $x + 8 * 3600) );
}

sub gettreename
{
    my ( $ip, $labels ) = @_;
    return 'unkown' unless $labels && ref $labels eq 'HASH';

    my $treename = '';
    for my $k ( keys %$labels )
    {
        next unless $k =~ /^labels\.treeid_/;
        $treename = $labels->{$k} if length( $labels->{$k} ) > length( $treename );
    }
    
    if( ! $treename && $ip && $ip =~ /^\d+\.\d+\.\d+\.\d+$/ )
    {
        $treename = `c3mc-mon-nodetree-get $ip`;
        chomp $treename;
    }

    return $treename || 'unkown';
}

sub gethostname
{
    my ( $ip, $labels ) = @_;
    if( $ip && $ip =~ /^\d+\.\d+\.\d+\.\d+$/ )
    {
        my $hostname = `c3mc-mon-nodename-get $ip`;
        chomp $hostname;
    
        return $hostname || 'unkown';
    }
    elsif( $ip =~ /^[a-zA-Z0-9][a-zA-Z0-9\-\._:@]+[a-zA-Z0-9]$/ )
    {
        my $x = `c3mc-mon-instancealias '$ip'`;
        chomp $x;
        return $x || 'unkown';
    }
    else
    {
        return 'unkown' unless $labels && ref $labels eq 'HASH';
        return $labels->{'labels.addr'} || 'unkown';
    }
}

my @out;
sub addcont
{
    my $data = shift @_;

    return unless $data && ref $data eq 'HASH';

    my %senddata;
    $senddata{ title  } = $environment->{ monitorTemplateEmailTitle   } || $template{ monitorTemplateEmailTitle   };
    $senddata{ content} = $environment->{ monitorTemplateEmailContent } || $template{ monitorTemplateEmailContent };
    $senddata{ mesg   } = $environment->{ monitorTemplateSmsContent   } || $template{ monitorTemplateSmsContent   };
    $senddata{ call   } = $environment->{ monitorTemplateCallContent  } || $template{ monitorTemplateCallContent  };

    $data->{ statusZH   } = Encode::decode( 'utf8', '告警发生中' ) if $data->{status} && $data->{status} eq 'firing';
    $data->{ statusZH   } = Encode::decode( 'utf8', '告警已恢复' ) if $data->{status} && $data->{status} eq 'resolved';

    $data->{ startsAtZH } = gettime( $data->{ startsAt } ) if $data->{ startsAt };
    $data->{ endsAtZH   } = gettime( $data->{ endsAt   } ) if $data->{ endsAt   };

    $data->{treename} = gettreename( $data->{'labels.instance'}, $data );

    $data->{ instancename } = $data->{'labels.instance'             };
    $data->{ instancename } = $data->{'labels.instanceid'           } if $data->{'labels.instanceid'      };
    $data->{ instancename } = $data->{'labels.cache_cluster_id'     } if $data->{'labels.cache_cluster_id'};
    $data->{ instancename } = $data->{'labels.dbinstance_identifier'} if $data->{'labels.dbinstance_identifier'};

    $data->{hostname} = gethostname( $data->{'instancename'}, $data );
    $data->{instancealias} = $data->{hostname};
    
    for my $x ( qw( cloudmonname ) )
    {
        $data->{instancealias} = $data->{"labels.$x"} if $data->{instancealias} eq 'unkown' && $data->{"labels.$x"};
    }

    my $skip = `c3mc-base-configx monitor.sender.skip_resolved_mesg`;
    chomp $skip;
    return if $skip && $skip eq '1' && $data->{status} && $data->{status} eq 'resolved';

    my %replace = %$data;
    for my $key ( keys %senddata )
    {
        for ( keys %replace )
        {
            $senddata{$key} =~ s/\$\{$_\}/$replace{$_}/g;
        }
    }

    if(
        ( $environment->{isMonitorSuccessEmail} && $environment->{isMonitorSuccessEmail} eq 'true' ) &&
        ( $data->{'labels.severity'} && ( $data->{'labels.severity'} eq 'level1' || $data->{'labels.severity'} eq 'level2' || $data->{'labels.severity'} eq 'level3' ) )
    )
    {
        $data->{ title   } = $senddata{ title   };
        $data->{ content } = $senddata{ content };
        $data->{ content } .= "\nc3monitormsguuid:[$data->{c3monitormsguuid}]" if $data->{c3monitormsguuid};
    }

    if(
        ( $environment->{isMonitorSuccessSms} && $environment->{isMonitorSuccessSms} eq 'true' ) &&
        ( $data->{'labels.severity'} && ( $data->{'labels.severity'} eq 'level1' || $data->{'labels.severity'} eq 'level2' ) ) 
    )
    {

        $data->{mesg} = $senddata{mesg};
        $data->{mesg} .= "\nc3monitormsguuid:[$data->{c3monitormsguuid}]" if $data->{c3monitormsguuid};
    }

    if(
        ( $environment->{isMonitorSuccessCall} && $environment->{isMonitorSuccessCall} eq 'true' ) &&
        ( $data->{'labels.severity'} && ( $data->{'labels.severity'} eq 'level1' ) ) 
    )
    {

        $data->{call} = $senddata{call};
        $data->{call} .= "\nc3monitormsguuid:[$data->{c3monitormsguuid}]" if $data->{c3monitormsguuid};
    }

    for my $t ( qw( title content mesg call ) )
    {
        next unless $data->{$t};
        $data->{$t} =~ s#(\d+\.\d)\d+%#$1%#;
    }

    push @out, $data;
}

map{ addcont($_ ) }@data;

print YAML::XS::Dump @out;
