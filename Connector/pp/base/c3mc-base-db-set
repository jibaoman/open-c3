#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

binmode STDIN,  ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use MYDB;
use FindBin qw( $RealBin );
use MYDan::Util::OptConf;
use YAML::XS;
use Encode;

=head1 SYNOPSIS

 $0 dat1 dat2 ... datn --table foo --set 'foo=123'
 $0 dat1 dat2 ... datn --table foo --set 'foo=123' [--col colname]
 $0 dat1 dat2 ... datn --table foo --set 'foo=123' [--col colname] [--filter]

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->set( col => 'id' )->get( qw( set=s col=s table=s filter=s ) )->dump();
$option->assert('set', 'table');

my $module = ( split /_/, $o{table} )[1];
my %table = (
    ci        => 'CI',
    job       => 'JOB',
    jobx      => 'JOBX',
    agent     => 'AGENT',
    connector => 'Connector',
    monitor   => 'AGENT',
    device    => 'AGENT',
    tt        => 'Connector',
);

die "table $o{table} undef" unless $module && $table{$module};
my $db = MYDB->new( "/data/Software/mydan/$table{$module}/conf/conn", delayedconnection => 1 );

my $where = $o{filter} ? " and( $o{filter} )" : '';
sub set
{
    my $dat = shift;
    die "dat err" if $dat =~ /'/;

    eval{ $db->execute( "update $o{table} set $o{set} where `$o{col}`='$dat'$where" );};
    die "update database fail: $@" if $@;
    print "$dat\n";
}

if( @ARGV )
{
    map{ set($_) }@ARGV;
}
else
{
    while(<STDIN>){ chomp; set($_); }
}
