#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use MYDB;
use MYDan::Util::OptConf;
use LWP::UserAgent;
use JSON;
use Configini;
use TreeMap;
use OPENC3::SysCtl;

=head1 SYNOPSIS

 $0

 $0 cache

=cut

my $usecache = @ARGV && $ARGV[0] eq 'cache' ? 1 : 0;

sub gettreemap
{
    my ( $id, $treemap, %env ) = shift @_;
    $treemap = Configini::get( "treemap$id" );
    return [] unless $treemap;

    %env = Configini::env( "treemapenv$id" );

    my $treemapgrep = Configini::get( "treemapgrep$id" );
    $treemapgrep = undef unless $treemapgrep && ref $treemapgrep eq 'ARRAY';

    my $treemapeid = Configini::get( "treemapeid$id" );
    $treemapeid = undef unless $treemapeid && ref $treemapeid eq 'ARRAY' && @$treemapeid == 2;

    my $treemapexstr = Configini::get( "treemapexstr$id" );
    $treemapexstr = undef unless $treemapexstr && ref $treemapexstr eq 'ARRAY';

    if( $treemap =~ /api.connector.open-c3.org/ )
    {
        my $db = MYDB->new( "/data/Software/mydan/Connector/conf/conn" );
        my @col = qw( id name len update_time );
        my $x = eval{ $db->query( sprintf( "select %s from openc3_connector_tree", join ',',@col ), \@col); };
        die if $@;
        my $t = $treemapgrep ? TreeMap::mapgrep( $x, @$treemapgrep ) : $x;
        $t = TreeMap::mapgrepexstr( $t, $treemapexstr ) if $treemapexstr;
        return $treemapeid ? TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
    }

    my $cache     = "/data/open-c3-data/cache/treemap/treemap-$id";
    my $cachetime =  OPENC3::SysCtl->new()->getint( 'sys.cache.treemap.timeout', 0, 86400 * 365, 60 );

    $cachetime = 604800 if -f '/var/openc3_connector_api_fail';

    $cachetime = 86400 * 365 if $usecache;

    if( $cachetime && -f $cache )
    {
        my $ctime = ( stat $cache )[9]; #mtime
        if( $ctime + $cachetime > time )
        {
            my $v;
            eval{
                $v = eval{ YAML::XS::LoadFile $cache };
                die "get cache fail: $@" if $@;
                die "stat no true"   unless $v->{stat};
                die "data no ARRAY"  unless $v->{data} && ref $v->{data} eq 'ARRAY';
            };

            if( $@ )
            {
                warn "get cache fail: $@";
            }
            else
            {
                 my $t = $treemapgrep ? TreeMap::mapgrep( $v->{data}, @$treemapgrep ) : $v->{data};
                 $t = TreeMap::mapgrepexstr( $t, $treemapexstr ) if $treemapexstr;
                 return $treemapeid ? TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
            }
        }
    }

    my $ua = LWP::UserAgent->new;
    $ua->timeout( 15 );
    $ua->default_header( %env ) if %env;

    my ( $res, $err );

    for my $i ( reverse 1 .. 3 )
    {
        $res = $ua->get( $treemap );
        $err = sprintf "get treemap fail: $treemap: %s", YAML::XS::Dump $res;
        $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

        last if $res->is_success;
        if( $i > 1 )
        {
            warn sprintf( "$err code %s", $res->code );
            sleep 3;
        }
    }

    my $v;
    eval{
        die sprintf( "$err: code %s", $res->code ) unless $res->is_success;

        $v = eval{JSON::decode_json $res->decoded_content};
        die "data no JSON: $@"  if $@;
        die "stat no true"  unless $v->{stat};
        die "data no ARRAY" unless $v->{data} && ref $v->{data} eq 'ARRAY';
    };

    if( $@ )
    {
        warn "$err $@";
        #TODO if cache too old ?
        $v = eval{ YAML::XS::LoadFile $cache };
        die "get cache fail: $@" if $@;
        die "stat no true"   unless $v->{stat};
        die "data no ARRAY"  unless $v->{data} && ref $v->{data} eq 'ARRAY';
 
    }
    else
    {
        if( $cachetime )
        {
            eval{
                YAML::XS::DumpFile "$cache.tmp.$$", $v;
                die "rename fail" unless rename "$cache.tmp.$$", $cache;
            };
            warn "set cache fail: $@" if $@;
        }
 
    }

    my $t = $treemapgrep ? TreeMap::mapgrep( $v->{data}, @$treemapgrep ) : $v->{data};
    $t = TreeMap::mapgrepexstr( $t, $treemapexstr ) if $treemapexstr;
    return $treemapeid ? TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
}

map{
    my $tree = gettreemap($_);
    map{
        if( defined $_->{id} && defined $_->{name} && $_->{id} =~ /^\d+$/ )
        {
            print "$_->{id};$_->{name}\n";
        }
        else
        {
            warn "[warn] treemap fromat no good";
        }
    }@$tree;
}'', 1 .. 9;
