#!/data/Software/mydan/perl/bin/perl
use strict;
use warnings;
use utf8;
use JSON;
use YAML::XS;
use DataStruct::Flat;

binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

=head1 SYNOPSIS

 $0 name1 alias1 name2 alias2 .. namen aliasn

=cut

map{utf8::decode( $_ );}@ARGV;
my ( %alias, @data, %title ) = @ARGV;

my $flattener = DataStruct::Flat->new;
sub save
{
    my $str = shift @_;
    my $dat = eval{ JSON::decode_json $str };
    die "load json err:$str : $@" if $@;
    my $data = $flattener->flatten($dat);
    push @data, $data;
    %title = ( %title, %$data );
}

while(<STDIN>){ chomp; save($_); }

warn YAML::XS::Dump \@data if $ENV{C3DEBUG};

my %tsort = map{ $_ => 500 - length( $_ ) }keys %title;

my $i = 1;
for my $k ( reverse @ARGV )
{
    next unless $tsort{ $k };
    $tsort{ $k } += 10000 * $i ++;
}

my @title = sort{ $tsort{$b} <=> $tsort{$a} } keys %title;
exit unless @title;

unshift @data, +{ map{ $_ => $alias{$_} || $_ }@title };
for my $d ( @data )
{
    printf "%s\n", join "\t", map{ $_ =~ s/\t//g; $_ =~ s/\n//g; $_ } map{ $d->{$_} // '' }@title;
}
