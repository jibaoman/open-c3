#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

$|++;

use MYDB;
use MYDan::Util::OptConf;
use LWP::UserAgent;
use JSON;
use Configini;
use OPENC3::Crypt;

=head1 SYNOPSIS

 $0 --user user1

=cut

my $option = MYDan::Util::OptConf->load();
my %o      = $option->get( qw(    user=s ) )->dump();
             $option->assert( qw( user   ) );

die "user format error" unless $o{user} =~ /^[a-zA-Z0-9][a-zA-Z0-9\.\-_\@]+$/;

my %info = (
    accountId   => $o{user},
    accountName => "",
    mobile      => "",
    sybDeptName => "",
    oneDeptName => "",
);

my $db = MYDB->new( "/data/Software/mydan/Connector/conf/conn", delayedconnection => 1 );

my $crypt = OPENC3::Crypt->new();
my $x = $db->query( sprintf "select email,phone from openc3_connector_useraddr where user='$o{user}'" );
if( @$x )
{
    $info{ accountId  } = $crypt->decode( $x->[0][0] ) if $x->[0][0];
    $info{ mobile     } = $x->[0][1] ? $crypt->decode( $x->[0][1] ) : '';
}

$x = $db->query( sprintf "select department from openc3_connector_userdepartment where user='$o{user}'" );
if( @$x )
{
    $info{ oneDeptName } = $x->[0][0] if $x->[0][0];
}

my ( $userinfo, %env );
$userinfo = Configini::get( 'userinfo'    );
%env      = Configini::env( 'userinfoenv' );

if( $userinfo ){

    my $ua = LWP::UserAgent->new;
    $ua->timeout( 15 );
    $ua->default_header( %env ) if %env;

    my ( $res, $err );
    for my $i ( reverse 1 .. 3 )
    {
        $res = $ua->get( $userinfo . $o{user});

        $err = sprintf "get userinfo fail: $userinfo: %s", YAML::XS::Dump $res;
        $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

        last if $res->is_success;
        if( $i > 1 )
        {
            warn sprintf( "userinfo code %s", $res->code );
            sleep 3;
        }
    }

    die sprintf( "$err: code %s", $res->code ) unless $res->is_success;

    my $v = eval{JSON::decode_json $res->decoded_content};
    die "$err: data no JSON: $@" if $@;
    die $err unless $v->{stat};
    die "$err: data no HASH: $@" unless $v->{data} && ref $v->{data} eq 'HASH';

    for ( keys %info )
    {
        $info{$_} ||= $v->{data}{$_};
    }
}

unless( $info{accountName} )
{
    $info{accountName} = $o{user};
    $info{accountName} =~ s/@.*$//;
}

print YAML::XS::Dump \%info;
