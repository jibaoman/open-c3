#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

use OPENC3::PP::Exec;
use OPENC3::PP::Server;
use OPENC3::SysCtl;

=head1 SYNOPSIS

 $0 servername

=cut

$|++;
my $name = shift @ARGV;
my %help = (
    promesd           => 'make openc3_node_sd.yml to prometheus',
    sender            => 'sender mesg from alertmanager',
    rule              => 'get monitor rule',
    carry             => 'get monitor carry info',
    'extend-exporter' => 'extend-exporter control: mysql,redis',
    mailmon           => 'mail monitor',
    portcheckok       => 'check port',
    inherit           => 'inherit',
    cloudmon          => 'cloudmon',
    keepalive         => 'server keepalive',
    devicesync        => 'device sync',
);

unless( $name )
{
    map{ print "\$0 $_ # $help{$_}\n" }keys %help;
    exit;
}

if( $name eq 'promesd' )
{
    my $nodetemp       = "/data/Software/mydan/AGENT/conf/promesd.temp";
    my $tempfile       = "$nodetemp.$$";
    my $openc3_node_sd = '/data/Software/mydan/prometheus/config/openc3_node_sd.yml';

    my $mysqltemp       = "/data/Software/mydan/AGENT/conf/promesdmysql.temp";
    my $mysqltmp        = "$mysqltemp.$$";
    my $openc3_mysql_sd = '/data/Software/mydan/prometheus/config/openc3_mysql_sd_v3.yml';

    my $redistemp       = "/data/Software/mydan/AGENT/conf/promesdredis.temp";
    my $redistmp        = "$redistemp.$$";
    my $openc3_redis_sd = '/data/Software/mydan/prometheus/config/openc3_redis_sd_v3.yml';

    my $mongodbtemp       = "/data/Software/mydan/AGENT/conf/promesdmongodb.temp";
    my $mongodbtmp        = "$mongodbtemp.$$";
    my $openc3_mongodb_sd = '/data/Software/mydan/prometheus/config/openc3_mongodb_sd_v3.yml';

    my $mode = OPENC3::SysCtl->new()->get( 'sys.monitor.mode' ) // 'single';
    $mode = 'off' if -f '/data/Software/mydan/Connector/c3.maintain.mon';

    my $greptree = OPENC3::SysCtl->new()->get( 'sys.monitor.grep.tree' );
    my $grepnode = OPENC3::SysCtl->new()->get( 'sys.monitor.grep.node' );

    my $ignore = '/data/open-c3-data/monitor.node.ignore';

    if( $mode eq 'off' || -f "/data/open-c3-data/promesd.off" ) {
        $0 = "agent_server_$name";
        warn ">> skip by sys.monitor.mode=off or /data/open-c3-data/promesd.off\n";
        system "> $openc3_node_sd";
        sleep 10*365*86400;
        exit;
    }
    elsif( $mode eq 'single' )
    {
        OPENC3::PP::Server->new(
            name     => "agent_server_$name",
            interval => 1800,
            timeout  => 3600,
            pipefail => 1,
        )->run(
           [
               "c3mc-base-treemap",
               #grep -E ';app.|;ops.'
               $greptree ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $greptree ) : undef,
               "awk -F';' '{print \$1}'",
               "c3mc-base-fullnodeinfo -c projectid,inip",
               $grepnode ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $grepnode ) : undef,
               ( -f $ignore ) ? "c3mc-base-grepv -c 2 -f $ignore" : undef,
               "tee $tempfile",
               "c3mc-mon-nodesd-format --output $openc3_node_sd.temp",
           ],
           "mv $tempfile $nodetemp && mv $openc3_node_sd.temp $openc3_node_sd",
#mysql
           [
               "c3mc-base-treemap",
               $greptree ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $greptree ) : undef,
               "awk -F';' '{print \$1}'",
               "c3mc-device-ingestion-mysql -c projectid,addr,auth",
               $grepnode ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $grepnode ) : undef,
               ( -f $ignore ) ? "c3mc-base-grepv -c 2 -f $ignore" : undef,
               "tee $mysqltmp",
               "c3mc-mon-mysqlsd-format --output $openc3_mysql_sd.temp",
           ],
           "mv $mysqltmp $mysqltemp && mv $openc3_mysql_sd.temp $openc3_mysql_sd",
#redis
           [
               "c3mc-base-treemap",
               $greptree ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $greptree ) : undef,
               "awk -F';' '{print \$1}'",
               "c3mc-device-ingestion-redis -c projectid,addr,auth",
               $grepnode ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $grepnode ) : undef,
               ( -f $ignore ) ? "c3mc-base-grepv -c 2 -f $ignore" : undef,
               "tee $redistmp",
               "c3mc-mon-redissd-format --output $openc3_redis_sd.temp",
           ],
           "mv $redistmp $redistemp && mv $openc3_redis_sd.temp $openc3_redis_sd",
#mongodb
           [
               "c3mc-base-treemap",
               $greptree ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $greptree ) : undef,
               "awk -F';' '{print \$1}'",
               "c3mc-device-ingestion-mongodb -c projectid,addr,auth",
               $grepnode ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $grepnode ) : undef,
               ( -f $ignore ) ? "c3mc-base-grepv -c 2 -f $ignore" : undef,
               "tee $mongodbtmp",
               "c3mc-mon-mongodbsd-format --output $openc3_mongodb_sd.temp",
           ],
           "mv $mongodbtmp $mongodbtemp && mv $openc3_mongodb_sd.temp $openc3_mongodb_sd",
        );
    }
    elsif( $mode eq 'prometheus' )
    {
        my $prometheusReplica = OPENC3::SysCtl->new()
            ->get( 'sys.monitor.prometheus.prometheus.replica' ) // 1;
 
        my @id = 1 .. $prometheusReplica;
        my @x = `c3mc-base-task-grep  -m monitor @id`;
        unless( @x ) {
            $0 = "agent_server_$name";
            warn ">> skip by sys.monitor.prometheus.prometheus.replica\n";
            system "> $openc3_node_sd";
            sleep 10*365*86400;
            exit;
        }
 
        OPENC3::PP::Server->new(
            name     => "agent_server_$name",
            interval => 1800,
            timeout  => 3600,
            pipefail => 1,
        )->run(
           [
               "c3mc-base-treemap",
               $greptree ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $greptree ) : undef,
               "awk -F';' '{print \$1}'",
               "c3mc-base-fullnodeinfo -c projectid,inip",
               $grepnode ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $grepnode ) : undef,
               ( -f $ignore ) ? "c3mc-base-grepv -c 2 -f $ignore" : undef,
               "tee $tempfile",
               "c3mc-mon-nodesd-format --output $openc3_node_sd.temp",
           ],
           "mv $tempfile $nodetemp && mv $openc3_node_sd.temp $openc3_node_sd",
        );
    }
    elsif( $mode eq 'thanos' )
    {
        OPENC3::PP::Server->new(
            name     => "agent_server_$name",
            interval => 1800,
            timeout  => 3600,
            pipefail => 1,
        )->run(
           [
               "c3mc-base-treemap",
               $greptree ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $greptree ) : undef,
               "awk -F';' '{print \$1}'",
               "c3mc-base-fullnodeinfo -c projectid,inip",
               $grepnode ? sprintf( "grep -E '%s'", join '|', map{ ";$_" }split /,/, $grepnode ) : undef,
               ( -f $ignore ) ? "c3mc-base-grepv -c 2 -f $ignore" : undef,
               "tee $tempfile",
               "awk -F'.' '{print \$NF\";\"\$0}'",
               "c3mc-base-task-grep -m monitor",
               "awk -F';' '{print \$2\";\"\$3}'",
               "c3mc-mon-nodesd-format --output $openc3_node_sd.temp"
           ],
           "mv $tempfile $nodetemp && mv $openc3_node_sd.temp $openc3_node_sd",
        );
    }
    else
    {
        warn "sys.monitor.mode $mode unkown";
        sleep 10*365*86400;
        exit;
    }
}

if( $name eq 'promesdx' )
{
    my $nodetemp       = "/data/Software/mydan/AGENT/conf/promesd.temp";
    my $openc3_node_sd = '/data/Software/mydan/prometheus/config/openc3_node_sd.yml';

    my $mode = OPENC3::SysCtl->new()->get( 'sys.monitor.mode' ) // 'single';
    $mode = 'off' if -f '/data/Software/mydan/Connector/c3.maintain.mon';

    if( $mode eq 'single' || $mode eq 'prometheus' )
    {
        OPENC3::PP::Server->new(
            name     => "agent_server_$name",
            interval => 60,
            timeout  => 120,
            pipefail => 1,
        )->run(
           "c3mc-mon-nodeextsd-format --output /data/Software/mydan/prometheus/config/openc3_nodeext_sd.yml",
        );
 
    }
    if( $mode eq 'thanos' )
    {
        OPENC3::PP::Server->new(
            name     => "agent_server_$name",
            interval => 60,
            timeout  => 120,
            pipefail => 1,
        )->run(
           [
               "cat $nodetemp",
               "awk -F'.' '{print \$NF\";\"\$0}'",
               "c3mc-base-task-grep -m monitor",
               "awk -F';' '{print \$2\";\"\$3}'",
               "c3mc-mon-nodesd-format --output $openc3_node_sd.tempx"
           ],
           "mv $openc3_node_sd.tempx $openc3_node_sd",
           "c3mc-mon-nodeextsd-format --output /data/Software/mydan/prometheus/config/openc3_nodeext_sd.yml",
        );
    }
    else
    {
        $0 = "agent_server_$name";
        sleep 10*365*86400;
        exit;
    }
}

if( $name eq 'rule' )
{
    my $mode = OPENC3::SysCtl->new()->get( 'sys.monitor.mode' ) // 'single';
    $mode = 'off' if -f '/data/Software/mydan/Connector/c3.maintain.mon';

    if( $mode eq 'off' || -f "/data/open-c3-data/promesd.off" ) {
        $0 = "agent_server_$name";
        warn ">> skip by sys.monitor.mode=off or /data/open-c3-data/promesd.off\n";
        sleep 10*365*86400;
        exit;
    }

    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 60,
        timeout  => 120,
    )->run(
        "c3mc-mon-rule --output /data/Software/mydan/prometheus/config/openc3_rule.yml",
        "curl -XPOST http://OPENC3_PROMETHEUS_IP:9090/-/reload 2>/dev/null",
    );
}

if( $name eq 'carry' )
{
    my $mode = OPENC3::SysCtl->new()->get( 'sys.monitor.mode' ) // 'single';
    $mode = 'off' if -f '/data/Software/mydan/Connector/c3.maintain.mon';

    if( $mode eq 'off' || -f "/data/open-c3-data/promesd.off" ) {
        $0 = "agent_server_$name";
        warn ">> skip by sys.monitor.mode=off or /data/open-c3-data/promesd.off\n";
        sleep 10*365*86400;
        exit;
    }

    my $uexip = OPENC3::SysCtl->new()->get( 'sys.monitor.uexip' ) || '0.0.0.0';
    die "uexip $uexip err" unless $uexip =~ /^[0-9][0-9\.,]*$/;

    my $AGENT = '/data/Software/mydan/AGENT';
    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 60,
        timeout  => 120,
    )->run(
        "cat $AGENT/conf/promesd.temp |                          c3mc-mon-carry --output $AGENT/conf/openc3_carry.yml",
        "cat $AGENT/conf/promesd.temp | awk -F';' '{print \$2}'| c3mc-mon-proxy --output $AGENT/conf/openc3_proxy.yml",
        "cat $AGENT/conf/promesd.temp | awk -F';' '{print \$2}'| sort | uniq | c3mc-base-ipfilter -f '$uexip' | c3mc-base-uexip --output $AGENT/conf/openc3_uexip.yml",
        "c3mc-mon-treeinfo > /data/Software/mydan/Connector/local/treeinfo.txt.temp && mv /data/Software/mydan/Connector/local/treeinfo.txt.temp /data/Software/mydan/Connector/local/treeinfo.txt",
#mysql
        "cat $AGENT/conf/promesdmysql.temp   | awk -F';' '{print \$2}'| c3mc-mon-proxy-port    --output $AGENT/conf/openc3_mysql_proxy.yml",
        "cat $AGENT/conf/promesdmysql.temp   |                          c3mc-mon-carry-mysql   --output $AGENT/conf/openc3_mysql_carry.yml",
#redis
        "cat $AGENT/conf/promesdredis.temp   | awk -F';' '{print \$2}'| c3mc-mon-proxy-port    --output $AGENT/conf/openc3_redis_proxy.yml",
        "cat $AGENT/conf/promesdredis.temp   |                          c3mc-mon-carry-redis   --output $AGENT/conf/openc3_redis_carry.yml",
#mongodb
        "cat $AGENT/conf/promesdmongodb.temp | awk -F';' '{print \$2}'| c3mc-mon-proxy-port    --output $AGENT/conf/openc3_mongodb_proxy.yml",
        "cat $AGENT/conf/promesdmongodb.temp |                          c3mc-mon-carry-mongodb --output $AGENT/conf/openc3_mongodb_carry.yml",
 
    );
}

if( $name eq 'sender' )
{
    my $mode = OPENC3::SysCtl->new()->get( 'sys.monitor.mode' ) // 'single';
    $mode = 'off' if -f '/data/Software/mydan/Connector/c3.maintain.mon';

    if( $mode eq 'off' || -f "/data/open-c3-data/promesd.off" ) {
        $0 = "agent_server_$name";
        warn ">> skip by sys.monitor.mode=off or /data/open-c3-data/promesd.off\n";
        sleep 10*365*86400;
        exit;
    }

    chdir "/data/open-c3-data/monitor-sender" or die "chdir fail: $!";
    map{ die if system "mkdir -p  $_"; }qw( zsucc zfail run );

    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 6,
        timeout  => 60,
    )->run( "ls *.wait 2>/dev/null| xargs -P 5 -i{} bash -c \"c3mc-mon-sender {}\"" );
}

if( $name eq 'extend-exporter' )
{
    my @cmd;

    for my $type ( qw( mysql redis ) )
    {
        my $file = "/data/Software/mydan/AGENT/config/$type-exporter.conf";
        next unless -f $file;

        push @cmd, "cat $file | c3mc-mon-$type-exportermaker";
        push @cmd, "cat $file | c3mc-mon-$type-exporterclean";
        push @cmd, "cat $file | c3mc-mon-$type-sdformat --output /data/Software/mydan/prometheus/config/openc3_${type}_sd.yml";
    }

    my   @mysql;
    push @mysql, "c3mc-mon-mysql-v3-exportercheck";
    push @mysql, "find /data/open-c3-data/mysqld-exporter-v3/cache/ -type f -mmin -60 | c3mc-mon-mysql-v3-exportermaker";
    push @mysql, "find /data/open-c3-data/mysqld-exporter-v3/cache/ -type f -mmin -60 | c3mc-mon-mysql-v3-exporterclean";

    my   @redis;
    push @redis, "c3mc-mon-redis-v3-exportercheck";
    push @redis, "find /data/open-c3-data/redis-exporter-v3/cache/ -type f -mmin -60 | c3mc-mon-redis-v3-exportermaker";
    push @redis, "find /data/open-c3-data/redis-exporter-v3/cache/ -type f -mmin -60 | c3mc-mon-redis-v3-exporterclean";

    my   @mongodb;
    push @mongodb, "c3mc-mon-mongodb-v3-exportercheck";
    push @mongodb, "find /data/open-c3-data/mongodb-exporter-v3/cache/ -type f -mmin -60 | c3mc-mon-mongodb-v3-exportermaker";
    push @mongodb, "find /data/open-c3-data/mongodb-exporter-v3/cache/ -type f -mmin -60 | c3mc-mon-mongodb-v3-exporterclean";


    push @cmd, @mysql, @redis, @mongodb;

    @cmd = @mysql   if $ENV{ C3_MysqlQuery_Container   };
    @cmd = @redis   if $ENV{ C3_RedisQuery_Container   };
    @cmd = @mongodb if $ENV{ C3_MongodbQuery_Container };


    unless( @cmd ) { $0 = "agent_server_$name"; sleep 10*365*86400; exit; } 

    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 300,
        timeout  => 120,
    )->run( @cmd );

}

if( $name eq 'self-healing' )
{
    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 60,
        timeout  => 120,
    )->run(
       "c3mc-base-db-get -t openc3_monitor_self_healing_config altername jobname name | c3mc-mon-selfhealing-curralter | c3mc-mon-selfhealing-grepeips | c3mc-mon-selfhealing-maketask",
       "c3mc-base-db-get -t openc3_monitor_self_healing_task id instance jobname --filter 'taskuuid is null' | c3mc-mon-selfhealing-runtask",
       "c3mc-base-db-get -t openc3_monitor_self_healing_task id taskuuid --filter 'taskstat<>\"success\" and taskstat<>\"fail\"' | c3mc-mon-selfhealing-updatetask",
       'c3mc-base-db-get -t openc3_monitor_self_healing_task id instance fingerprint startsAt  alertname --filter "taskstat=\"success\" and healingstat is null and healingchecktime> $(date +%s)" | c3mc-mon-selfhealing-update',
       'c3mc-base-db-get -t openc3_monitor_self_healing_task id instance fingerprint startsAt  alertname --filter "taskstat=\"success\" and healingstat is null and healingchecktime< $(date +%s)" | c3mc-mon-selfhealing-update --close',
    );
}

if( $name eq 'mailmon' )
{
    chdir "/data/glusterfs/mailmon/data" or die "chdir fail: $!";
    map{ die if system "mkdir -p  $_"; }qw( zsucc zfail run );

    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 30,
        timeout  => 60,
    )->run(
        "cd ../conf && ls |xargs -i{} c3mc-mon-mailmon-syncer {}",
        "ls *.wait 2>/dev/null| xargs -P 5 -i{} bash -c \"c3mc-mon-mailmon-sender {}\"",
    );
}

if( $name eq 'portcheckok' )
{
    if( ! -f "/etc/openc3.supervisormin.on" ) {
        $0 = "agent_server_$name";
        warn ">> skip by /etc/openc3.supervisormin.on\n";
        sleep 10*365*86400;
        exit;
    }

    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 30,
        timeout  => 60,
    )->run(
       "c3mc-app-port-checkok"
    );
}

if( $name eq 'inherit' )
{
    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 300,
        timeout  => 600,
    )->run( "c3mc-agent-inherit");
}

if( $name eq 'cloudmon' )
{
    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 60,
        timeout  => 600,
    )->run( "c3mc-cloudmon-make-task && c3mc-cloudmon-make-promesd && c3mc-cloudmon-make-promesd prometheus-federate");
}

if( $name eq 'keepalive' )
{
    my @x = qx(c3mc-base-db-get id -t openc3_agent_keepalive -f "slave='`c3mc-base-hostname`'");
    unless( @x )
    {
        die if system 'c3mc-base-db-ins -t openc3_agent_keepalive slave `c3mc-base-hostname` time `date +%s` >/dev/null';
    }
    @x = qx(c3mc-base-db-get id -t openc3_monitor_keepalive -f "slave='`c3mc-base-hostname`'");
    unless( @x )
    {
        die if system 'c3mc-base-db-ins -t openc3_monitor_keepalive slave `c3mc-base-hostname` time `date +%s` >/dev/null';
    }
 
    OPENC3::PP::Server->new(
        name     => "agent_server_$name",
        interval => 15,
        timeout  => 120,
    )->run(
        'c3mc-base-db-set -t openc3_agent_keepalive   --col slave `c3mc-base-hostname` --set time="`date +%s`" --filter="time<>0" >/dev/null',
        'c3mc-base-db-set -t openc3_monitor_keepalive --col slave `c3mc-base-hostname` --set time="`date +%s`" --filter="time<>0" >/dev/null',
    );
}

if( $name eq 'devicesync' )
{
    my $interval = OPENC3::SysCtl->new()->get( 'sys.device.sync.interval' );
    unless( $interval && $interval =~ /^\d+$/ )
    {
        $0 = "agent_server_$name";
        sleep 10*365*86400;
        exit;
    }
    else
    {

        OPENC3::PP::Server->new(
            name     => "agent_server_$name",
            interval => $interval,
            timeout  => $interval * 2,
        )->run( 'c3mc-device-load' );
    }
}
